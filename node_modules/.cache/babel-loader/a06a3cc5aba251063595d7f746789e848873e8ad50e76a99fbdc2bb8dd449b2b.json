{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Profile\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ChatView = _resolveComponent(\"ChatView\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.user ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Email: \" + _toDisplayString($data.user.email), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"No user is logged in\")), _createCommentVNode(\" ChatViewコンポーネントの表示 \"), $data.user ? (_openBlock(), _createBlock(_component_ChatView, {\n    key: 2\n  })) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","key","_createElementBlock","_hoisted_1","$data","user","_hoisted_2","_toDisplayString","email","_hoisted_3","_createCommentVNode","_createBlock","_component_ChatView"],"sources":["/Users/koutaohi/docker/vue-chat/vueApp/vue-sample/src/components/ProfileComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Profile</h2>\n    <p v-if=\"user\">Email: {{ user.email }}</p>\n    <p v-else>No user is logged in</p>\n    <!-- ChatViewコンポーネントの表示 -->\n    <ChatView v-if=\"user\" />\n  </div>\n</template>\n\n<script>\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"../firebaseConfig\";\nimport ChatView from './ChatView.vue';\n\nexport default {\n  components: {\n    ChatView\n  },\n  data() {\n    return {\n      user: null // ログイン中のユーザー情報を格納\n    };\n  },\n  created() {\n    // 認証状態が変わるたびに呼ばれる\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // ユーザーがログインしている場合、ユーザー情報を保存\n        this.user = user;\n        console.log(\"Logged in user:\", user);\n      } else {\n        // ユーザーがログアウトしている場合、ユーザー情報をクリア\n        this.user = null;\n        console.log(\"No user is logged in\");\n      }\n    });\n  }\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAAgB,YAAZ,SAAO;;EAFfC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAMM,cALJC,UAAgB,EACPC,KAAA,CAAAC,IAAI,I,cAAbH,mBAAA,CAA0C,KAH9CI,UAAA,EAGmB,SAAO,GAAAC,gBAAA,CAAGH,KAAA,CAAAC,IAAI,CAACG,KAAK,qB,cACnCN,mBAAA,CAAkC,KAJtCO,UAAA,EAIc,sBAAoB,IAC9BC,mBAAA,wBAA2B,EACXN,KAAA,CAAAC,IAAI,I,cAApBM,YAAA,CAAwBC,mBAAA;IAN5BX,GAAA;EAAA,MAAAS,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}